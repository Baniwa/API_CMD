#API, REST e RESTFUL 


#API - Application Programming Interface
    
    Cliente (Client)
    Garçon (pedidos, levar seus pedidos para a cozinha) (API)
    Cozinha (server)

    É basicamente um conjunto de rotinas e padrões estabelecidos por uma aplicação,
    para que outras aplicações possam utilizar as funcionalidades desta aplicação. 
        - Responsável por estabelecer comunicação entre diferentes serviços. 
        - Intermediador para troca de informações. 
        - Meio de campo entre as tecnologias 


 
#REST - Representational State Transfer
    Determina as obrigações na transferencia de dados, geralmente usando o protocolo HTTP.
    Resources seria então, uma entidade, um objeto 
        - Verbos HTTP:  GET  : Receber dados de um Resource. 
                        POST : Enviar dados ou informações para serem processados por um Resource. 
                        PUT  : Atualizar os dados de um Resource
                        DELETE : Deletar um Resource
                        


# RESTFUL -     
    RESTful, é a aplicação dos padrões REST. 

# 5 NECESSIDADES (constraints) para ser RESTful

- _Client-server_: Separação do cliente e do armazenamento de dados do (servidor), dessa forma, poderemos ter uma 
                    portablidade do nosso sistema, usando o React para WEB e React Native para o smartphone, por exemplo. 

-_Stateless_: Cada requisição que o cliente faz para o servidor, deverá conter todas as informações necessárias para
                o servidor entender e responder (RESPONSE) a requisição (REQUEST). Exemplo: A sessão do usuário deverá ser enviada em todas as requisições, 
                para saber se aquele usuário está autenticado e apto a usar os serviços, e o servidor não pode lembrar que o cliente foi autenticado na requisição anterior. 
                Temos por padrão usar tokens para as comunicações (sendo ela fechada).

-_Cacheable_: As respostas para uma requisição, deverão ser explicitas ao dizer se aquela requisição, pode ou não ser cacheada pelo cliente.

-_Layered System_: O cliente acessa a um endpoint, sem precisar saber da complexidade, de quais passos estão sendo necessários para o servidor responder a requisição,
                    ou quais outras camadas o servidor estará lidando, para que a requisição seja respondida.

-_Code on demand(optional)_: Dá a possibilidade da nossa aplicação pegar códigos, como o javascript, por exemplo, e executar no cliente; 


# STATUS DAS RESPOSTAS 

1xx: Informação

2xx: Sucesso
     200: OK
    201: CREATED
    204: Não tem conteúdo PUT POST DELETE

3xx: Redirection

4xx: Client Error
    400: Bad Request
    404: Not Found!

5xx: Server Error 500: Internal Server Error












#INICIO -- COMO CRIAR UMA API 

criar um projeto :: yarn init -y  
                        Yarn, que é um gerenciador de pacotes para JavaScript. A opção -y significa "sim" e indica que o processo de inicialização usará valores padrão para todas as perguntas, 
                        criando um arquivo package.json sem pedir entrada do usuário.

criar um servidor :: yarn add express
                     O Express é um framework web para Node.js que simplifica o desenvolvimento de aplicativos web e APIs.

verificar o servidor :: node server.js 

no express para utilizar os verbos :: app.get("/clients", function(request, response){}); 

                                      app.post("/clients", function(req, res){}); 

                                      app.put("/clients/:id", function(req, res){} );

                                      app.delete("/clients/:id", function(req, res){});
